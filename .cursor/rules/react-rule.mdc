// Ë™ûË®ÄÊ™îÊ°àÁµêÊßã
interface Messages {
  'app.title': string;
  'nav.home': string;
  'nav.about': string;
  'nav.contact': string;
  'user.greeting': string;
  'user.profile.edit': string;
  'form.validation.required': string;
  'form.validation.email': string;
  'button.save': string;
  'button.cancel': string;
  'error.network': string;
  'success.saved': string;
}

// Ë™ûË®ÄË≥áÊ∫ê
const messages: Record<string, Messages> = {
  'zh-TW': {
    'app.title': 'React ÊáâÁî®Á®ãÂºè',
    'nav.home': 'È¶ñÈ†Å',
    'nav.about': 'ÈóúÊñºÊàëÂÄë',
    'nav.contact': 'ËÅØÁµ°ÊàëÂÄë',
    'user.greeting': 'ÊÇ®Â•ΩÔºå{name}ÔºÅ',
    'user.profile.edit': 'Á∑®ËºØÂÄã‰∫∫Ë≥áÊñô',
    'form.validation.required': 'Ê≠§Ê¨Ñ‰ΩçÁÇ∫ÂøÖÂ°´',
    'form.validation.email': 'Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈõªÂ≠êÈÉµ‰ª∂Âú∞ÂùÄ',
    'button.save': 'ÂÑ≤Â≠ò',
    'button.cancel': 'ÂèñÊ∂à',
    'error.network': 'Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§',
    'success.saved': 'ÂÑ≤Â≠òÊàêÂäü',
  },
  'en-US': {
    'app.title': 'React Application',
    'nav.home': 'Home',
    'nav.about': 'About',
    'nav.contact': 'Contact',
    'user.greeting': 'Hello, {name}!',
    'user.profile.edit': 'Edit Profile',
    'form.validation.required': 'This field is required',
    'form.validation.email': 'Please enter a valid email address',
    'button.save': 'Save',
    'button.cancel': 'Cancel',
    'error.network': 'Network connection error',
    'success.saved': 'Saved successfully',
  },
  'ja-JP': {
    'app.title': 'React„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
    'nav.home': '„Éõ„Éº„É†',
    'nav.about': '„Å´„Å§„ÅÑ„Å¶',
    'nav.contact': '„ÅäÂïè„ÅÑÂêà„Çè„Åõ',
    'user.greeting': '„Åì„Çì„Å´„Å°„ÅØ„ÄÅ{name}„Åï„ÇìÔºÅ',
    'user.profile.edit': '„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ',
    'form.validation.required': '„Åì„ÅÆÈ†ÖÁõÆ„ÅØÂøÖÈ†à„Åß„Åô',
    'form.validation.email': 'ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    'button.save': '‰øùÂ≠ò',
    'button.cancel': '„Ç≠„É£„É≥„Çª„É´',
    'error.network': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Ç®„É©„Éº',
    'success.saved': '‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü',
  },
};

// ‚úì ÂúãÈöõÂåñ Context Âíå Hook
interface I18nContextValue {
  locale: string;
  setLocale: (locale: string) => void;
  availableLocales: Array<{ code: string; name: string; flag: string }>;
  isRTL: boolean;
}

const I18nContext = createContext<I18nContextValue | null>(null);

const useI18n = () => {
  const context = useContext(I18nContext);
  if (!context) {
    throw new Error('useI18n must be used within I18nProvider');
  }
  return context;
};

const I18nProvider = ({ children }: { children: ReactNode }) => {
  const [locale, setLocale] = useState(() => {
    // ÂÑ™ÂÖàÈ†ÜÂ∫èÔºölocalStorage > ÁÄèË¶ΩÂô®Ë™ûË®Ä > È†êË®≠Ë™ûË®Ä
    const savedLocale = localStorage.getItem('app-locale');
    if (savedLocale && messages[savedLocale]) {
      return savedLocale;
    }
    
    const browserLocale = navigator.language;
    if (messages[browserLocale]) {
      return browserLocale;
    }
    
    // ÂòóË©¶ÂåπÈÖçË™ûË®Ä‰ª£Á¢ºÔºàÂøΩÁï•Âú∞ÂçÄÔºâ
    const languageCode = browserLocale.split('-')[0];
    const matchingLocale = Object.keys(messages).find(key => key.startsWith(languageCode));
    
    return matchingLocale || 'zh-TW';
  });
  
  const availableLocales = [
    { code: 'zh-TW', name: 'ÁπÅÈ´î‰∏≠Êñá', flag: 'üáπüáº' },
    { code: 'en-US', name: 'English', flag: 'üá∫üá∏' },
    { code: 'ja-JP', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  ];
  
  const isRTL = ['ar', 'he', 'fa'].includes(locale.split('-')[0]);
  
  const handleSetLocale = useCallback((newLocale: string) => {
    setLocale(newLocale);
    localStorage.setItem('app-locale', newLocale);
    
    // Êõ¥Êñ∞ HTML lang Â±¨ÊÄß
    document.documentElement.lang = newLocale;
    document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
  }, [isRTL]);
  
  useEffect(() => {
    document.documentElement.lang = locale;
    document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
  }, [locale, isRTL]);
  
  return (
    <I18nContext.Provider
      value={{
        locale,
        setLocale: handleSetLocale,
        availableLocales,
        isRTL,
      }}
    >
      <IntlProvider
        locale={locale}
        messages={messages[locale]}
        defaultLocale="zh-TW"
        onError={(error) => {
          if (process.env.NODE_ENV === 'development') {
            console.warn('React Intl Error:', error);
          }
        }}
      >
        {children}
      </IntlProvider>
    </I18nContext.Provider>
  );
};

// ‚úì Ë™ûË®ÄÂàáÊèõÂô®ÁµÑ‰ª∂
const LanguageSwitcher = () => {
  const { locale, setLocale, availableLocales } = useI18n();
  
  return (
    <select
      value={locale}
      onChange={(e) => setLocale(e.target.value)}
      aria-label="ÈÅ∏ÊìáË™ûË®Ä"
      className="language-switcher"
    >
      {availableLocales.map((lang) => (
        <option key={lang.code} value={lang.code}>
          {lang.flag} {lang.name}
        </option>
      ))}
    </select>
  );
};

// ‚úì ÂúãÈöõÂåñË°®ÂñÆÁµÑ‰ª∂
const InternationalizedForm = () => {
  const intl = useIntl();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    birthDate: '',
    salary: 0,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name.trim()) {
      newErrors.name = intl.formatMessage({ id: 'form.validation.required' });
    }
    
    if (!formData.email.trim()) {
      newErrors.email = intl.formatMessage({ id: 'form.validation.required' });
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = intl.formatMessage({ id: 'form.validation.email' });
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      console.log('Form submitted:', formData);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="intl-form">
      <h2>
        <FormattedMessage id="user.profile.edit" />
      </h2>
      
      <div className="form-group">
        <label htmlFor="name">
          <FormattedMessage id="form.field.name" defaultMessage="ÂßìÂêç" />
          <span aria-label={intl.formatMessage({ id: 'form.required.indicator' })}>*</span>
        </label>
        <input
          id="name"
          type="text"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          placeholder={intl.formatMessage({ 
            id: 'form.placeholder.name', 
            defaultMessage: 'Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÂßìÂêç' 
          })}
          aria-invalid={!!errors.name}
          aria-describedby={errors.name ? 'name-error' : undefined}
        />
        {errors.name && (
          <div id="name-error" role="alert" className="error-message">
            {errors.name}
          </div>
        )}
      </div>
      
      <div className="form-group">
        <label htmlFor="email">
          <FormattedMessage id="form.field.email" defaultMessage="ÈõªÂ≠êÈÉµ‰ª∂" />
          <span aria-label={intl.formatMessage({ id: 'form.required.indicator' })}>*</span>
        </label>
        <input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          placeholder={intl.formatMessage({ 
            id: 'form.placeholder.email', 
            defaultMessage: 'Ë´ãËº∏ÂÖ•ÈõªÂ≠êÈÉµ‰ª∂Âú∞ÂùÄ' 
          })}
          aria-invalid={!!errors.email}
          aria-describedby={errors.email ? 'email-error' : undefined}
        />
        {errors.email && (
          <div id="email-error" role="alert" className="error-message">
            {errors.email}
          </div>
        )}
      </div>
      
      <div className="form-group">
        <label htmlFor="birthDate">
          <FormattedMessage id="form.field.birthDate" defaultMessage="Âá∫ÁîüÊó•Êúü" />
        </label>
        <input
          id="birthDate"
          type="date"
          value={formData.birthDate}
          onChange={(e) => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}
        />
        {formData.birthDate && (
          <div className="field-preview">
            <FormattedMessage id="form.preview.birthDate" defaultMessage="È°ØÁ§∫ÁÇ∫: " />
            <FormattedDate
              value={new Date(formData.birthDate)}
              year="numeric"
              month="long"
              day="numeric"
            />
          </div>
        )}
      </div>
      
      <div className="form-group">
        <label htmlFor="salary">
          <FormattedMessage id="form.field.salary" defaultMessage="Ëñ™Ë≥á" />
        </label>
        <input
          id="salary"
          type="number"
          value={formData.salary}
          onChange={(e) => setFormData(prev => ({ ...prev, salary: Number(e.target.value) }))}
        />
        {formData.salary > 0 && (
          <div className="field-preview">
            <FormattedMessage id="form.preview.salary" defaultMessage="È°ØÁ§∫ÁÇ∫: " />
            <FormattedNumber
              value={formData.salary}
              style="currency"
              currency="TWD"
            />
          </div>
        )}
      </div>
      
      <div className="form-actions">
        <button type="submit" className="btn-primary">
          <FormattedMessage id="button.save" />
        </button>
        <button type="button" className="btn-secondary">
          <FormattedMessage id="button.cancel" />
        </button>
      </div>
    </form>
  );
};

// ... existing code ...
const createCSPHeader = (config: CSPConfig, isDevelopment = false): string => {
  const directives = Object.entries(config)
    .map(([key, values]) => {
      const directive = key.replace(/([A-Z])/g, '-$1').toLowerCase();
      return `${directive} ${values.join(' ')}`;
    })
    .join('; ');
  // ÈñãÁôºÁí∞Â¢ÉÂÖÅË®± unsafe-eval Áî®Êñº HMR
  if (isDevelopment) {
    return directives.replace(
      'script-src',
      "script-src 'unsafe-eval'"
    );
  }
  return directives;
};

// ‚úì CSP Â∞çÊØîÁØÑ‰æã

// ‚úì Ê≠£‰æã
const csp = createCSPHeader({
  defaultSrc: ["'self'"],
  scriptSrc: ["'self'", "https://trusted.cdn.com"],
  styleSrc: ["'self'", "https://fonts.googleapis.com"],
  imgSrc: ["'self'", "data:"],
  connectSrc: ["'self'"],
  fontSrc: ["'self'", "https://fonts.gstatic.com"],
  objectSrc: ["'none'"],
  mediaSrc: ["'self'"],
  frameSrc: ["'none'"],
});

// ‚úó Âèç‰æã
const cspBad = createCSPHeader({
  defaultSrc: ["*"],
  scriptSrc: ["*"],
  styleSrc: ["*"],
  imgSrc: ["*"],
  connectSrc: ["*"],
  fontSrc: ["*"],
  objectSrc: ["*"],
  mediaSrc: ["*"],
  frameSrc: ["*"],
});
// Â§±ÊïóÂéüÂõ†ÔºöÂÖÅË®±ÊâÄÊúâ‰æÜÊ∫êÔºåÁÑ°Ê≥ïÈò≤Ê≠¢ XSS ËàáË≥áÊ∫êÊ≥®ÂÖ•ÊîªÊìä„ÄÇ

// ...
// ÂúñÂÉè„ÄÅÂΩ±ÁâáËàáÂ™íÈ´î
// lazy loading„ÄÅAVIF/WebP„ÄÅcanvas/WebGL Êï¥Âêà
const OptimizedImage = ({ src, alt, width, height }) => (
  <picture>
    <source srcSet={src.replace('.jpg', '.avif')} type="image/avif" />
    <source srcSet={src.replace('.jpg', '.webp')} type="image/webp" />
    <img src={src} alt={alt} loading="lazy" width={width} height={height} />
  </picture>
);

// WebGL Êï¥Âêà
import { useRef, useEffect } from 'react';
const WebGLCanvas = () => {
  const canvasRef = useRef(null);
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const gl = canvas.getContext('webgl');
    if (!gl) return;
    // WebGL ÂàùÂßãÂåñËàáÁπ™Ë£Ω...
  }, []);
  return <canvas ref={canvasRef} width={640} height={480} />;
};

// Progressive Web App
// Service Worker„ÄÅÈõ¢Á∑öÁ≠ñÁï•„ÄÅËÉåÊôØÂêåÊ≠•
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js').then(
      reg => console.log('SW registered', reg),
      err => console.error('SW registration failed', err)
    );
  });
}

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request).then(response => response || fetch(event.request))
  );
});

self.addEventListener('sync', event => {
  if (event.tag === 'sync-comments') {
    event.waitUntil(syncComments());
  }
});

// Server Components ËàáÈÇäÁ∑£Ê∏≤Êüì
// React ÊúçÂãôÁ´ØÂÖÉ‰ª∂ÂéüÁêÜ„ÄÅRSC + Bun„ÄÅEdge Runtime secure fetch
export default function Page() {
  const data = fetchDataFromDB();
  return <div>{data.title}</div>;
}

export async function edgeHandler(request) {
  const res = await fetch('https://api.example.com/data', {
    headers: { 'Authorization': `Bearer ${process.env.API_TOKEN}` },
    cache: 'no-store',
  });
  return new Response(await res.text());
}

// MobXÔºèZustandÔºèRedux Toolkit Â∞àÁ´†
// ÊØîËºÉÈÅ∏Âûã„ÄÅÊïàËÉΩÈô∑Èò±ËàáÊúÄ‰Ω≥ÂØ¶Ë∏ê
import create from 'zustand';
const useStore = create(set => ({
  count: 0,
  inc: () => set(state => ({ count: state.count + 1 })),
}));

import { configureStore, createSlice } from '@reduxjs/toolkit';
const counterSlice = createSlice({
  name: 'counter',
  initialState: 0,
  reducers: {
    increment: state => state + 1,
    decrement: state => state - 1,
  },
});
const store = configureStore({ reducer: { counter: counterSlice.reducer } });
// Ê≠£‰æãÔºöÈÅ∏Êìá Zustand ËôïÁêÜÊú¨Âú∞ UI ÁãÄÊÖãÔºåRedux Toolkit ËôïÁêÜÂÖ®ÂüüÊ•≠ÂãôÁãÄÊÖã„ÄÇ
// Âèç‰æãÔºöMobX Áî®ÊñºÂ§ßÂûãÂ§ö‰∫∫Âçî‰ΩúÂ∞àÊ°àÔºåÂ∞éËá¥ÁãÄÊÖãËøΩËπ§Âõ∞Èõ£ËàáÊïàËÉΩÁì∂È†∏„ÄÇ
// Â§±ÊïóÂéüÂõ†ÔºöMobX ÁöÑÈö±Âºè‰æùË≥¥ËøΩËπ§Âú®Â§ßÂûãÂ∞àÊ°à‰∏≠ÊòìÂá∫Áèæ‰∏çÂèØÈ†êÊúüÁöÑÈáçÊ∏≤Êüì„ÄÇ

// Monorepo ËàáÊ®°ÁµÑÂåñ
// Turborepo 2„ÄÅNx„ÄÅpnpm workspaces„ÄÅÂåÖË£ùÂ∫´Ë®≠Ë®à
// package.json
// {
//   "name": "my-monorepo",
//   "private": true,
//   "workspaces": [
//     "packages/*",
//     "apps/*"
//   ]
// }

// CI/CD ËàáÈÉ®ÁΩ≤
// Vite + Docker„ÄÅÂ§öÁí∞Â¢ÉÈÖçÁΩÆ„ÄÅGitHub Actions„ÄÅËá™ÂãïÂåñÂõûÊ≠∏Ê∏¨Ë©¶
// .github/workflows/ci.yml
// name: CI
// on: [push, pull_request]
// jobs:
//   build:
//     runs-on: ubuntu-latest
//     steps:
//       - uses: actions/checkout@v3
//       - uses: pnpm/action-setup@v2
//         with:
//           version: 8
//       - run: pnpm install
//       - run: pnpm build
//       - run: pnpm test

// ÂèØËßÄÊ∏¨ÊÄßËàáÊó•Ë™å
// OpenTelemetry„ÄÅSentry„ÄÅLogflare„ÄÅEdge ËøΩËπ§
import * as Sentry from '@sentry/react';
Sentry.init({
  dsn: 'https://xxx@sentry.io/123',
  integrations: [new Sentry.BrowserTracing()],
  tracesSampleRate: 1.0,
});

// ÂçáÁ¥öËàáÈÅ∑ÁßªÊåáÂçó
// React 18 ‚Üí 19„ÄÅLegacy Context„ÄÅClass Component ÂÖ±Â≠òÁ≠ñÁï•
// 1. Ê™¢Êü•ÊâÄÊúâÁ¨¨‰∏âÊñπÂ•ó‰ª∂Áõ∏ÂÆπÊÄß
// 2. ÈÄêÊ≠•ÊõøÊèõËàä APIÔºàÂ¶Ç legacy context„ÄÅUNSAFE_ ÂâçÁ∂¥ÊñπÊ≥ïÔºâ
// 3. ‰ΩøÁî® codemod Â∑•ÂÖ∑Ëá™ÂãïËΩâÊèõ
// npx react-codemod update-react-19

// ÈôÑÈåÑ
// Ë©ûÂΩôË°®„ÄÅÂª∂‰º∏Èñ±ËÆÄ„ÄÅÂ∏∏Ë¶ãÂïèÁ≠î
// RSCÔºöReact Server Components
// SuspenseÔºöReact ‰∏≤ÊµÅËàáÁï∞Ê≠•ÈÇäÁïå
// TransitionÔºöReact 19 ‰∏¶ÁôºÁãÄÊÖãÂàáÊèõ API
// ZodÔºöTypeScript ÂûãÂà•È©óË≠âÂáΩÂºèÂ∫´
// MSWÔºöMock Service WorkerÔºåAPI Ê∏¨Ë©¶Â∑•ÂÖ∑
// ...
// Call-To-Action
// Á´ãÂç≥Áî®Êú¨ÊâãÂÜäÁöÑ„ÄåËá™ÊàëÊ™¢Êü•Ê∏ÖÂñÆ„ÄçÂØ©Ê†∏‰Ω†ÁöÑÁèæÊúâÂ∞àÊ°àÔºåÊâæÂá∫ÂèØÂÑ™ÂåñÁöÑÊû∂Êßã„ÄÅÊïàËÉΩËàáÂÆâÂÖ®Áí∞ÁØÄ„ÄÇÂ∞áÊØè‰∏ÄÈ†ÖÂèçÊÄùÁõíÂïèÈ°åÂØ¶ÈöõÊºîÁ∑¥Ôºå‰∏¶Â∞áÊúÄ‰Ω≥ÂØ¶Ë∏êËêΩÂØ¶ÊñºÊó•Â∏∏ÈñãÁôºÊµÅÁ®ã„ÄÇÂîØÊúâÊåÅÁ∫åÊ™¢Êü•ËàáÁ≤æÈÄ≤ÔºåÊâçËÉΩÁúüÊ≠£ÊôâÂçá React Êû∂ÊßãÂ∏´‰πãË∑ØÔºÅ